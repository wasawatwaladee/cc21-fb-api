// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
 id            Int           @id @default(autoincrement())
 firstName     String
 lastName      String
 email         String?       @unique
 mobile        String?       @unique
 password      String
 profileImage  String?
 CoverImage    String?
 createdAt     DateTime      @default(now()) @db.Timestamp(0)
 updatedAt     DateTime      @updatedAt @db.Timestamp(0)
 posts         Post[]
 comments      Comment[]
 likes         Like[]
 senders       Relationship[]  @relation(name: "sender")
 receivers     Relationship[]  @relation(name: "receiver")
}

model Post {
 id            Int           @id @default(autoincrement())
 message       String?       @db.Text
 image         String?
 createdAt     DateTime      @default(now()) @db.Timestamp(0)
 updatedAt     DateTime      @updatedAt @db.Timestamp(0)
 userId        Int
 user          User          @relation(fields: [userId], references: [id])
 comments      Comment[]
 likes         Like[]
}

model Comment {
 id            Int           @id @default(autoincrement())
 message       String?       @db.Text
 createdAt     DateTime      @default(now()) @db.Timestamp(0)
 updatedAt     DateTime      @updatedAt @db.Timestamp(0)
 userId        Int
 postId        Int
 user          User          @relation(fields: [userId], references: [id])
 post          Post          @relation(fields: [postId], references: [id])
}

model Like {
 userId        Int
 postId        Int
 createdAt     DateTime      @default(now()) @db.Timestamp(0)
 user          User          @relation(fields: [userId], references: [id],onDelete: Cascade)
 post          Post          @relation(fields: [postId], references: [id],onDelete: Cascade)      
 @@id([userId, postId])
}

enum RelationshipStatus {
 PENDING
 ACCEPTED
}
model Relationship {
 id            Int                   @id @default(autoincrement())
 status        RelationshipStatus    @default(PENDING)
 createdAt     DateTime              @default(now()) @db.Timestamp(0)
 updatedAt     DateTime              @updatedAt @db.Timestamp(0)
 senderId      Int
 receiverId    Int
 sender        User          @relation(name: "sender", fields: [senderId], references: [id])
 receiver      User          @relation(name: "receiver", fields: [receiverId], references: [id])  
}

